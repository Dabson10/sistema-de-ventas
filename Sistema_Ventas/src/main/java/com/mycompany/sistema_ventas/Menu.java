/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistema_ventas;

import com.formdev.flatlaf.FlatDarkLaf;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tadeo
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        initStyles();
        tablas();

    }

public int calcular() {
    int nuevoTotal = 0;
    int precio = 0;

    // Recorre cada fila de la tabla para sumar los precios
    for (int i = 0; i < Tabla.getRowCount(); i++) {
        precio = Integer.parseInt(Tabla.getValueAt(i, 3).toString());  // AsegÃºrate de que la columna es la correcta
        nuevoTotal += precio;
    }

    // Actualiza el total en la interfaz
    return nuevoTotal;
}

    public void tablas() {
        try {
            PreparedStatement ps = null;
            ResultSet rs = null;
            Conexiones.Conexion objetoConexion = new Conexiones.Conexion();
            String consulta1 = "SELECT idventa,producto,cantidad,precio FROM sistema_ventas.venta;";
            ps = objetoConexion.establecerConexion().prepareStatement(consulta1);
            rs = ps.executeQuery();
            JTable tabla = Tabla;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                Object[] Columnas = {
                    rs.getObject("idventa"),
                    rs.getObject("producto"),
                    rs.getObject("cantidad"),
                    rs.getObject("precio")
                };
                model.addRow(Columnas);
            }
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null,"No se pudieron mostrar los libros. ");
        }
    }

    public void initStyles() {
        lblTitulo.putClientProperty("FlatLaf.style", "font: $h1.font");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtProducto = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnRecorte = new javax.swing.JButton();
        btnSemanal = new javax.swing.JButton();
        btnProductos = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnPagar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(221, 230, 237));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setForeground(new java.awt.Color(39, 55, 77));
        lblTitulo.setText("Tienda");
        jPanel1.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 210, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1050, 10));

        txtProducto.setText("Ingrese el nombre del producto:");
        txtProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtProductoMousePressed(evt);
            }
        });
        txtProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductoActionPerformed(evt);
            }
        });
        jPanel1.add(txtProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 750, 30));

        btnBuscar.setText("Agregar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 70, 150, 30));

        btnRecorte.setText("RECORTE");
        btnRecorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecorteActionPerformed(evt);
            }
        });
        jPanel1.add(btnRecorte, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 570, 100, -1));

        btnSemanal.setText("SEMANAL");
        btnSemanal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSemanalActionPerformed(evt);
            }
        });
        jPanel1.add(btnSemanal, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 570, 100, -1));

        btnProductos.setText("PRODUCTOS");
        btnProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductosActionPerformed(evt);
            }
        });
        jPanel1.add(btnProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 570, -1, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 1040, 10));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 550, 20, 60));

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 550, 30, 60));

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Producto", "Cantidad", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 750, -1));

        lblTotal.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(39, 55, 77));
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setText("0");
        jPanel1.add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 350, 120, 60));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Total a pagar: ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 320, 160, -1));

        btnEliminar.setText("ELIMINAR DE TABLA ");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 120, 200, 30));

        btnPagar.setText("PAGAR");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });
        jPanel1.add(btnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 450, 80, -1));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("$");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 360, 40, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
//        consultas.Agregar llamar = new consultas.Agregar();
//        llamar.agregar(txtProducto);

        try {
            PreparedStatement ps = null;
            ResultSet rs = null;

            Conexiones.Conexion objetoConexion = new Conexiones.Conexion();
            String consulta1 = "SELECT idproductos,producto,disponibles,Precio FROM sistema_ventas.productos WHERE producto =?;";
            ps = objetoConexion.establecerConexion().prepareStatement(consulta1);

            ps.setString(1, txtProducto.getText());

            rs = ps.executeQuery();

            if (rs.next()) {
                //Variables de la tabla de productos 
                String id = rs.getString("idproductos");
                String produ = rs.getString("producto");
                String cantidadProdu = rs.getString("disponibles");
                String precioProducto = rs.getString("Precio");

                //Consulta para verificar si el producto ya esta en la tabla de ventas
                if (Integer.valueOf(cantidadProdu) > 0) {
                    String consultaVenta = "SELECT producto,cantidad,precio FROM sistema_ventas.venta WHERE producto=?;";
                    ps = objetoConexion.establecerConexion().prepareStatement(consultaVenta);

                    ps.setString(1, txtProducto.getText());

                    rs = ps.executeQuery();

                    if (rs.next()) {
                        String produVentas = rs.getString("producto");
                        String cantidadVentas = rs.getString("cantidad");
                        String precioVenta = rs.getString("precio");

                        if (txtProducto.getText().equals(produVentas)) {
                            int sumaPrecio = Integer.valueOf(precioProducto) + Integer.valueOf(precioVenta);
                            String sumaTot = String.valueOf(sumaPrecio);

                            int cantidadVenta = Integer.valueOf(cantidadVentas) + 1;
                            String sumaProdu = String.valueOf(cantidadVenta);

                            String updVentas = "UPDATE sistema_ventas.venta SET cantidad=? ,precio=? WHERE producto=?; ";
                            ps = objetoConexion.establecerConexion().prepareStatement(updVentas);

                            ps.setString(1, sumaProdu);
                            ps.setString(2, sumaTot);
                            ps.setString(3, txtProducto.getText());

                            int numF = ps.executeUpdate();
                            if (numF > 0) {
                                //En esta parte si no funciona agregarlo desde aqui al jframe , despues de esta linea se agregara la variable para la suma del 
                                //textfield, si no funciona con clase hacerlo dentro del  mismo boton.
                                int venta = Integer.valueOf(precioProducto) + Integer.valueOf(lblTotal.getText());
                                lblTotal.setText(String.valueOf(venta));
                                //Consulta para actualizar la base de datos de los productos 
                                int productos = Integer.valueOf(cantidadProdu);
                                productos = productos - 1;
                                String updProducto = "UPDATE sistema_ventas.productos SET disponibles=? WHERE producto=?;";
                                ps = objetoConexion.establecerConexion().prepareStatement(updProducto);

                                ps.setString(1, String.valueOf(productos));
                                ps.setString(2, txtProducto.getText());

                                int numFilas = ps.executeUpdate();

                                if (numFilas > 0) {
                                    JOptionPane.showMessageDialog(null, "Se actualizo correctamente: ");
                                }

                            }

                        }

                    } else {
                        //Este else es por si no se habia agregado algun producto en la base de datos 

                        if (Integer.valueOf(cantidadProdu) > 0) {
                            //Consulta para agregar datos en la base de datos de ventas 
                            String agregarVentas = "INSERT INTO sistema_ventas.venta(producto,cantidad,precio) VALUES (?,?,?);";
                            ps = objetoConexion.establecerConexion().prepareStatement(agregarVentas);
                            String canti = "1";
                            ps.setString(1, txtProducto.getText());
                            ps.setString(2, canti);
                            ps.setString(3, precioProducto);

                            int numF = ps.executeUpdate();
                            int venta = Integer.valueOf(precioProducto) + Integer.valueOf(lblTotal.getText());
                            lblTotal.setText(String.valueOf(venta));
                            if (numF > 0) {
                                int productos = Integer.valueOf(cantidadProdu);
                                productos = productos - 1;
                                String updProducto = "UPDATE sistema_ventas.productos SET disponibles=? WHERE producto=?;";
                                ps = objetoConexion.establecerConexion().prepareStatement(updProducto);

                                ps.setString(1, String.valueOf(productos));
                                ps.setString(2, txtProducto.getText());

                                int numFilas = ps.executeUpdate();

                                if (numFilas > 0) {
                                    JOptionPane.showMessageDialog(null, "Se actualizo correctamente: ");
                                }

                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "No hay productos disponibles ");
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No hay productos en almacen ");
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Esta mal");
        }

        tablas();

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductosActionPerformed
        // TODO add your handling code here:
        if (Integer.valueOf(lblTotal.getText()) > 0) {
            JOptionPane.showMessageDialog(null, "Para acceder a esta seccion primero termine de vender ");
        } else {
            interfaz.Login llamar = new interfaz.Login();
            llamar.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_btnProductosActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        // TODO add your handling code here:
        //Boton que asegura que se realizo la compra, en este paso se agrega el valor 
        try {

            PreparedStatement ps = null;
            ResultSet rs = null;
            int inicio = Integer.valueOf(lblTotal.getText());

            if (inicio > 0) {
                //La consulta es para encontrar la fila en dondese ubica la cantidad de ventas y obtenerlo para despues usarlo
                Conexiones.Conexion objetoConexion = new Conexiones.Conexion();
                String consulta = "SELECT idVenta,numVenta FROM sistema_ventas.ventaDiaria WHERE idVenta=?;";
                ps = objetoConexion.establecerConexion().prepareStatement(consulta);

                ps.setString(1, "1");
                rs = ps.executeQuery();

                if (rs.next()) {
                    int ventaNum = Integer.valueOf(rs.getString("numVenta"));

                    //Esta consulta es para agregar la venta en la tabla ventaDiaria
                    String agregar = "INSERT INTO sistema_ventas.ventaDiaria(ganancia) VALUES (?);";
                    ps = objetoConexion.establecerConexion().prepareStatement(agregar);

                    ps.setString(1, lblTotal.getText());

                    int numF = ps.executeUpdate();

                    if (numF > 0) {

                        //Ahora se hace un update para agregar la venta en el espacio de venta 
                        ventaNum = ventaNum + 1;
                        String contador = String.valueOf(ventaNum);
                        String updCont = "UPDATE sistema_ventas.ventaDiaria SET numVenta=? WHERE idVenta=?;";
                        ps = objetoConexion.establecerConexion().prepareStatement(updCont);

                        ps.setString(1, contador);
                        ps.setString(2, "1");

                        int nF = ps.executeUpdate();

                        if (nF > 0) {
                            //Ahora se ejecutara un DELETE de toda la tabla esto para que todo reinicie
                            String borrarVent = "DELETE FROM sistema_ventas.venta;";
                            ps = objetoConexion.establecerConexion().prepareStatement(borrarVent);

                            int numm = ps.executeUpdate();

                            if (numm > 0) {
                                JOptionPane.showMessageDialog(null, "Se elimino completamente la tabla ");
                                String returnTabla = "ALTER TABLE sistema_ventas.venta AUTO_INCREMENT=?;";
                                ps = objetoConexion.establecerConexion().prepareStatement(returnTabla);

                                ps.setInt(1, 1);
                                ps.executeUpdate();

                                tablas();

                                lblTotal.setText("0");

                            }

                            JOptionPane.showMessageDialog(null, "Hoy vendiste: " + contador);
                        }

                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Para pagar debe de ingresar productos ");
            }
//            //La consulta es para encontrar la fila en dondese ubica la cantidad de ventas y obtenerlo para despues usarlo
//            Conexiones.Conexion objetoConexion = new Conexiones.Conexion();
//            String consulta = "SELECT idVenta,numVenta FROM sistema_ventas.ventaDiaria WHERE idVenta=?;";
//            ps = objetoConexion.establecerConexion().prepareStatement(consulta);
//
//            ps.setString(1, "1");
//            rs = ps.executeQuery();
//
//            if (rs.next()) {
//                int ventaNum = Integer.valueOf(rs.getString("numVenta"));
//
//                //Esta consulta es para agregar la venta en la tabla ventaDiaria
//                String agregar = "INSERT INTO sistema_ventas.ventaDiaria(ganancia) VALUES (?);";
//                ps = objetoConexion.establecerConexion().prepareStatement(agregar);
//
//                ps.setString(1, lblTotal.getText());
//
//                int numF = ps.executeUpdate();
//
//                if (numF > 0) {
//
//                    //Ahora se hace un update para agregar la venta en el espacio de venta 
//                    ventaNum = ventaNum + 1;
//                    String contador = String.valueOf(ventaNum);
//                    String updCont = "UPDATE sistema_ventas.ventaDiaria SET numVenta=? WHERE idVenta=?;";
//                    ps = objetoConexion.establecerConexion().prepareStatement(updCont);
//
//                    ps.setString(1, contador);
//                    ps.setString(2, "1");
//
//                    int nF = ps.executeUpdate();
//
//                    if (nF > 0) {
//                        //Ahora se ejecutara un DELETE de toda la tabla esto para que todo reinicie
//                        String borrarVent="DELETE FROM sistema_ventas.venta;";
//                        ps=objetoConexion.establecerConexion().prepareStatement(borrarVent);
//                        
//                        int numm=ps.executeUpdate();
//                        
//                        if(numm>0){
//                            JOptionPane.showMessageDialog(null,"Se elimino completamente la tabla ");
//                            String returnTabla="ALTER TABLE sistema_ventas.venta AUTO_INCREMENT=?;";
//                            ps=objetoConexion.establecerConexion().prepareStatement(returnTabla);
//                            
//                            ps.setInt(1,1);
//                            ps.executeUpdate();
//                            
//                            tablas();
//                            
//                            lblTotal.setText("0");
//                            
//                            
//                            
//                            
//                        }
//                        
//                        JOptionPane.showMessageDialog(null, "Hoy vendiste: " + contador);
//                    }
//
//                }
//
//            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No paso ");
        }

    }//GEN-LAST:event_btnPagarActionPerformed

    private void btnSemanalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSemanalActionPerformed
        // TODO add your handling code here:
        if (Integer.valueOf(lblTotal.getText()) > 0) {
            JOptionPane.showMessageDialog(null, "Para acceder a esta seccion primero termine de vender ");
        } else {
            interfaz.Login llamar = new interfaz.Login();
            llamar.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_btnSemanalActionPerformed

    private void btnRecorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecorteActionPerformed
        // TODO add your handling code here:
        if (Integer.valueOf(lblTotal.getText()) > 0) {
            JOptionPane.showMessageDialog(null, "Para acceder a esta seccion primero termine de vender ");
        } else {
            interfaz.Login llamar = new interfaz.Login();
            llamar.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_btnRecorteActionPerformed

    private void txtProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductoActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtProductoActionPerformed

    private void txtProductoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtProductoMousePressed
        // TODO add your handling code here:
        if (txtProducto.getText().equals("Ingrese el nombre del producto:")) {
            txtProducto.setText("");
        }
    }//GEN-LAST:event_txtProductoMousePressed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        //Codigo que realiza una eliminacion de base de datos de ventas y de la tabla de la interfaz
        try {
            PreparedStatement ps = null;
            ResultSet rs = null;

            //La primera consulta es para verificar si hay producto en la tabla de ventas 
            Conexiones.Conexion objetoConexion = new Conexiones.Conexion();
            String consultaVentas = "SELECT producto,cantidad,precio FROM sistema_ventas.venta WHERE producto=?;";
            ps = objetoConexion.establecerConexion().prepareStatement(consultaVentas);

            ps.setString(1, txtProducto.getText());

            rs = ps.executeQuery();

            if (rs.next()) {
                String produVentas = rs.getString("producto");
                int cantidadVentas = Integer.valueOf(rs.getString("cantidad"));
                int precioVentas = Integer.valueOf(rs.getString("precio"));

                //Consulta para verificar y atraer los datos de la tabla de productos 
                String consultaProdu = "SELECT producto,disponibles,Precio FROM sistema_ventas.productos WHERE producto=?;";
                ps = objetoConexion.establecerConexion().prepareStatement(consultaProdu);
                ps.setString(1, txtProducto.getText());

                rs = ps.executeQuery();

                if (rs.next()) {
                    String nombreProdu = rs.getString("producto");
                    int cantidadProdu = Integer.valueOf(rs.getString("disponibles"));
                    int precioProdu = Integer.valueOf(rs.getString("Precio"));

                    if (cantidadProdu < 20) {
                        //Este if es para verificar que hay mas de 0 productos pero menos de 20
                        JOptionPane.showMessageDialog(null, "Hay en almacen: " + cantidadProdu);
                        if (cantidadVentas > 1) {
                            //Este if es para verificar que hay mas de 1 producto esto para que solo actualice la cantidad de productos en menos 1 con respecto al valor que ya tiene 
                            //Dentro de este if se realizara un update para reducir en uno la cantidad de productos
                            cantidadVentas = cantidadVentas - 1;

                            String updVentas = "UPDATE sistema_ventas.venta SET cantidad=? ,precio=? WHERE producto=?; ";
                            ps = objetoConexion.establecerConexion().prepareStatement(updVentas);
                            int total = precioVentas - precioProdu;
                            //int valor =Integer.valueOf(lblTotal.getText());

                            //lblTotal.setText(String.valueOf(valor-total));
                            ps.setString(1, String.valueOf(cantidadVentas));
                            ps.setString(2, String.valueOf(total));
                            ps.setString(3, txtProducto.getText());

                            int n = ps.executeUpdate();

                            if (n > 0) {//Ahora si el usuario elimino un producto ya teniendo varios debe de actualizar los datos ya que no se borra de la bse de d y del label

                                String restaurarProdu = String.valueOf(cantidadProdu + 1);
                                String updVentas1 = "UPDATE sistema_ventas.productos SET disponibles=? WHERE producto=?;";
                                ps = objetoConexion.establecerConexion().prepareStatement(updVentas1);

                                ps.setString(1, String.valueOf(restaurarProdu));
                                ps.setString(2, txtProducto.getText());
                                int nnn = ps.executeUpdate();
  //---------------------------------------------
                                int preciopp=calcular();
                                lblTotal.setText(String.valueOf(preciopp-precioProdu));
                                if (nnn > 0) {
                                   // JOptionPane.showMessageDialog(null, "se actualizo perrillo ");
                                }
                            }

                        } else {
                            //este else es con respecto a la cantidad en ventas si el valor es 1 entonces eliminara la linea completa 
                            //Dentro de este if se realizara un DELETE para eliminar la linea completa
                            String dltVentas = "DELETE FROM sistema_ventas.venta WHERE producto=?;";
                            ps = objetoConexion.establecerConexion().prepareStatement(dltVentas);

                            ps.setString(1, txtProducto.getText());
                            int total = precioVentas - precioProdu;

                            //lblTotal.setText(String.valueOf(total));
                            int nn = ps.executeUpdate();

                            if (nn > 0) {
                                //Sel elimina la linea entera

                                String restaurarProdu = String.valueOf(cantidadProdu + 1);
                                String updVentas1 = "UPDATE sistema_ventas.productos SET disponibles=? WHERE producto=?;";
                                ps = objetoConexion.establecerConexion().prepareStatement(updVentas1);

                                ps.setString(1, String.valueOf(restaurarProdu));
                                ps.setString(2, txtProducto.getText());
                                int nnn = ps.executeUpdate();
                                int preciopp=calcular();
                                 lblTotal.setText(String.valueOf(preciopp-precioProdu));
                                if (nnn > 0) {
                                    //JOptionPane.showMessageDialog(null, "se actualizo perrillo ");
                                }

                                JOptionPane.showMessageDialog(null, "Se elimino ");
                            }
                        }

                        if (cantidadVentas <= 0) {
                            JOptionPane.showMessageDialog(null, "No puede eliminar valores que no existen");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ya hay demaciados en existencia ");
                    }

                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo conectar ");
        }
        tablas();

    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            FlatDarkLaf.setup();
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnProductos;
    private javax.swing.JButton btnRecorte;
    private javax.swing.JButton btnSemanal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextField txtProducto;
    // End of variables declaration//GEN-END:variables
}
